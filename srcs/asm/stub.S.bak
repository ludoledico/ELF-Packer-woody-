DEFAULT REL

global		_stub_start
section		.text

%define	v0	eax
%define v1	ebx
%define	v2	edx
%define	v3	ebp

_stub_start:
	push	rax
	push	rbx
	push	rcx
	push	rdx
	push	rsp
	push	rbp
	; registers saved

    call	my_print
    db 		"...WOODY...", 10
 
    my_print:
    mov		rdx, 12
    pop		rsi
    mov		rdi, 1
    mov		rax, 1
    syscall				; write(1, "...WOODY...\n", 12);

    call	stub
    db		0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb
 
    stub:
    pop		rdi						; will be fixed with the key
	mov		r8, 0xcccccccccccccccc	; will be fixed for the text address
    lea		rsi, [_stub_start]
	add		rsi, r8
    mov		r8,  0xdddddddddddddddd ; will be fixed with text_size
 
    decrypt_loop:
    push	rdi			; pushing the address of g_key on the stack
    push	rsi			; pushing the address of buff on the stack
 
    ; load buf
    lodsd
    xchg    eax, v3		; storing 4 bytes in v3 (exchanged later)
    lodsd
    xchg    eax, v1		; storing 4 bytes in v1
    lodsd
    xchg    eax, v2		; storing 4 bytes in v2
    lodsd
    xchg	eax, v3		; storing 4 bytes in v3 (v0 is now filled)
 
    ; pre-whiten
    xor		v0,	[rdi]
    xor		v1,	[rdi+4]
    xor		v2,	[rdi+8]
    xor		v3,	[rdi+12]
 
    ; setting number of passes
    xor		rcx, rcx
    mov     cl, 16
    cld					; clearing direction flag
 
    ck_loop:
    pushfq				; saving flags
 
    ; decrypt
    ror     v2, 16
    xor     v1, v2
    ror     v1, 7
    sub     v2, v1
    xor     v3, v0
    ror     v3, 13
    sub     v0, v3
    xor     v3, v2
    ror     v3, 8
    sub     v2, v3
    ror     v0, 16
    xor     v1, v0
    ror     v1, 5
    sub     v0, v1
 
    popfq				; restoring flags
    loop	ck_loop		; loop for n passes
 
    ; post-whiten
    xor     v0, [rdi   ]
    xor     v1, [rdi+ 4]
    xor     v2, [rdi+ 8]
    xor     v3, [rdi+12]
    pop		rdi			; poping the address of buff from the stack
 
    ; saving buffer
    stosd
    xchg    eax, v1
    stosd
    xchg    eax, v2
    stosd
    xchg    eax, v3
    stosd
 
    pop		rdi			; restoring g_key
 
    sub		r8, 16		; n -= 16
    ;add		rsi, 16		; text_buff += 16
    ;cmp		r8, 16		; loop if n >= 16
	test	r8, r8
    jns		decrypt_loop
    ;jge		decrypt_loop
 
    ; restoring registers
    pop		rbp
    pop		rsp
    pop		rdx
    pop		rcx
    pop		rbx
    pop		rax
 
	; jumping to original entrypoint
	mov		r9, 0xaaaaaaaaaaaaaaaa		; will be fixed with the oep
	lea		r8, [_stub_start]
	add		r8, r9						; will be fixed for oep
	int3
	jmp		r8
